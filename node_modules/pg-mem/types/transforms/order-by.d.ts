import { IValue, _ISelection, _Transaction, _Explainer, _SelectExplanation, Stats, _IAggregation, Row } from '../interfaces-private';
import { FilterBase } from './transform-base';
import { OrderByStatement, ExprCall } from 'pgsql-ast-parser';
export declare function buildOrderBy(on: _ISelection, order: OrderByStatement[]): OrderBy;
declare class OrderBy extends FilterBase implements _IAggregation {
    private selection;
    order: {
        by: IValue;
        order: 'ASC' | 'DESC';
        nullsLast: boolean;
    }[];
    get index(): null;
    isAggregation(): this is _IAggregation;
    getAggregation(name: string, call: ExprCall): IValue;
    checkIfIsKey(got: IValue): IValue;
    private get asAggreg();
    entropy(t: _Transaction): number;
    hasItem(raw: Row, t: _Transaction): boolean;
    constructor(selection: _ISelection, order: OrderByStatement[]);
    stats(t: _Transaction): Stats | null;
    getIndex(...forValue: IValue[]): import("../interfaces").nil | import("../interfaces-private")._IIndex;
    enumerate(t: _Transaction): Iterable<Row>;
    explain(e: _Explainer): _SelectExplanation;
}
export {};
//# sourceMappingURL=order-by.d.ts.map