import { _ISchema } from '../interfaces-private';
export declare const socketAdapter: import("../utils").LazySync<(mem: _ISchema, queryLatency?: number) => {
    readonly peer: any;
    isTop: boolean;
    setNoDelay(): void;
    write(data: any, mcb1?: any, mcb2?: any): boolean;
    end(): any;
    destroySoon(): void;
    connect(): any;
    pause(): any;
    resume(): any;
    [EventEmitter.captureRejectionSymbol]?<K>(error: Error, event: string | symbol, ...args: any[]): void;
    addListener<K>(eventName: string | symbol, listener: (...args: any[]) => void): any;
    on<K>(eventName: string | symbol, listener: (...args: any[]) => void): any;
    once<K>(eventName: string | symbol, listener: (...args: any[]) => void): any;
    removeListener<K>(eventName: string | symbol, listener: (...args: any[]) => void): any;
    off<K>(eventName: string | symbol, listener: (...args: any[]) => void): any;
    removeAllListeners(event?: string | symbol | undefined): any;
    setMaxListeners(n: number): any;
    getMaxListeners(): number;
    listeners<K>(eventName: string | symbol): Function[];
    rawListeners<K>(eventName: string | symbol): Function[];
    emit<K>(eventName: string | symbol, ...args: any[]): boolean;
    listenerCount<K>(eventName: string | symbol, listener?: Function | undefined): number;
    prependListener<K>(eventName: string | symbol, listener: (...args: any[]) => void): any;
    prependOnceListener<K>(eventName: string | symbol, listener: (...args: any[]) => void): any;
    eventNames(): (string | symbol)[];
}>;
export declare function bindPgServer(this: void, peer: any, mem: _ISchema, queryLatency?: number): void;
//# sourceMappingURL=pg-socket-adapter.d.ts.map